#lang racket
(provide perf-test)

(define (perf-test func num-runs)
  (define (perf-helper n ttime) ;; num runs
    (cond [(= n 0) ttime]
          [else (begin (collect-garbage)
                       (define start-t (current-inexact-milliseconds))
                       (func)
                       (define end-t (current-inexact-milliseconds))
                       (perf-helper (- n 1) (+ (- end-t start-t) ttime)))]))
         (/ (perf-helper num-runs 0) num-runs))

(define (test start-param end-param delta num-run param-func)
  (define (test-helper dag-size)
    (cond [(> dag-size end-dag) 0]
          [else (let ([big-dag (gen-big-dag dag-size)])
                  (begin (define (func)
                           (sorter big-dag))
                         (display dag-size)
                         (display ",")
                         (collect-garbage)
                         (display (perf-test func num-run))
                         (display ",")
                         (newline)
                         (test-helper (+ dag-size delta))))]))
  (test-helper start-dag))

